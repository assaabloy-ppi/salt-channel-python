# -*- coding: utf-8 -*-

import unittest
from unittest import TestCase

import saltchannel.v2.exceptions
from saltchannel.exceptions import BadPeer

import saltchannel.v2.packets as packets

from saltchannel.util.crypto_test_data import CryptoTestData

class BaseTest(TestCase):
    def __init__(self, *args, **kwargs):
        TestCase.__init__(self, *args, **kwargs)

    def setUp(self):
        pass

    def tearDown(self):
        pass


class TestM1(BaseTest):

    def test_M1_properties(self):
        m1 = packets.M1Packet()

        m1.ClientEncKey = CryptoTestData.aEnc.pub
        self.assertEqual(m1.ClientEncKey, CryptoTestData.aEnc.pub)

        m1.data.Header.ServerSigKeyIncluded = 1
        m1.data.Header.TicketIncluded = 1
        m1.create_opt_fields()  # always configure all opt-related Header fields before calling create_opt_fields()
        m1.ServerSigKey = CryptoTestData.bSig.pub
        self.assertEqual(m1.ServerSigKey, CryptoTestData.bSig.pub)
        m1.Ticket = CryptoTestData.random32a
        self.assertEqual(m1.Ticket, CryptoTestData.random32a)

    # case data generated by https://github.com/assaabloy-ppi/salt-channel/blob/master/src/saltchannel/dev/ExamplePacketDump.java
    # Date: 2017-07-14
    def test_M1_dumps_case1(self):
        # M1 CASE: 1 -> time:  0xdeadbeef, serverSigKey: null, ticket: null, ticketRequested: false
        # sizeof(M1): 42, M1: '534376320100efbeadde8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a'
        m1_strdump = '534376320100efbeadde8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a'
        m1_dump = bytes.fromhex(m1_strdump)

        m1 = packets.M1Packet()
        m1.data.Time = 0xdeadbeef
        m1.ClientEncKey = CryptoTestData.aEnc.pub

        self.assertEqual(m1.size, 42)
        self.assertEqual(bytes(m1), m1_dump)

        # do the same, but init via constructor

        # creating M1Packet from bytes
        m1b = packets.M1Packet()
        m1b.from_bytes(m1_dump)

        self.assertEqual(m1b.size, 42)
        self.assertEqual(bytes(m1b), m1_dump)

        self.assertEqual(packets.PacketType.TYPE_M1.value, m1.data.Header.PacketType, m1b.data.Header.PacketType)
        self.assertEqual(m1.data.Time, m1b.data.Time)
        self.assertEqual(m1.ClientEncKey, m1b.ClientEncKey)

    # case data generated by https://github.com/assaabloy-ppi/salt-channel/blob/master/src/saltchannel/dev/ExamplePacketDump.java
    # Date: 2017-07-14
    def test_M1_dumps_case2(self):
        # M1 CASE: 2 -> time:  0xdeadbeef, serverSigKey: +, ticket: null, ticketRequested: true
        # sizeof(M1): 74, M1: '534376320105efbeadde8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a07e28d4ee32bfdc4b07d41c92193c0c25ee6b3094c6296f373413b373d36168b'
        m1_strdump = '534376320105efbeadde8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a07e28d4ee32bfdc4b07d41c92193c0c25ee6b3094c6296f373413b373d36168b'
        m1_dump = bytes.fromhex(m1_strdump)

        m1 = packets.M1Packet()
        m1.data.Header.TicketRequested = 1
        m1.data.Header.ServerSigKeyIncluded = 1
        m1.data.Time = 0xdeadbeef
        m1.ClientEncKey = CryptoTestData.aEnc.pub
        m1.create_opt_fields()  # always configure all opt-related Header fields before calling create_opt_fields()
        m1.ServerSigKey = CryptoTestData.bSig.pub

        self.assertEqual(m1.size, 74)
        self.assertEqual(bytes(m1), m1_dump)

        # creating M1Packet from bytes
        m1b = packets.M1Packet()
        m1b.from_bytes(m1_dump)

        self.assertEqual(m1b.size, 74)
        self.assertEqual(bytes(m1b), m1_dump)

        self.assertEqual(packets.PacketType.TYPE_M1.value, m1.data.Header.PacketType, m1b.data.Header.PacketType)
        self.assertEqual(m1.data.Header.TicketRequested, m1b.data.Header.TicketRequested)
        self.assertEqual(m1.data.Header.ServerSigKeyIncluded, m1b.data.Header.ServerSigKeyIncluded)
        self.assertEqual(m1.data.Time, m1b.data.Time)
        self.assertEqual(m1.ClientEncKey, m1b.ClientEncKey)
        self.assertEqual(m1.ServerSigKey, m1b.ServerSigKey)

    # case data generated by https://github.com/assaabloy-ppi/salt-channel/blob/master/src/saltchannel/dev/ExamplePacketDump.java
    # Date: 2017-07-14
    def test_M1_dumps_case3(self):
        # M1 CASE: 3 -> time:  0xdeadbeef, serverSigKey: null, ticket: 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e, ticketRequested: true
        # sizeof(M1): 170, M1: '534376320106efbeadde8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a7f000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e'
        m1_strdump = '534376320106efbeadde8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a7f000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e'
        m1_dump = bytes.fromhex(m1_strdump)
        ticket_strdump = '000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e'
        ticket_dump = bytes.fromhex(ticket_strdump)

        m1 = packets.M1Packet()
        m1.data.Header.TicketRequested = 1
        m1.data.Header.TicketIncluded = 1
        m1.data.Time = 0xdeadbeef
        m1.ClientEncKey = CryptoTestData.aEnc.pub
        m1.create_opt_fields()  # always configure all opt-related Header fields before calling create_opt_fields()
        m1.Ticket = ticket_dump

        self.assertEqual(m1.size, 170)
        self.assertEqual(bytes(m1), m1_dump)

        m1b = packets.M1Packet()
        m1b.from_bytes(m1_dump)

        self.assertEqual(m1b.size, 170)
        self.assertEqual(bytes(m1b), m1_dump)

        self.assertEqual(packets.PacketType.TYPE_M1.value, m1.data.Header.PacketType, m1b.data.Header.PacketType)
        self.assertEqual(m1.data.Header.TicketRequested, m1b.data.Header.TicketRequested)
        self.assertEqual(m1.data.Header.TicketIncluded, m1b.data.Header.TicketIncluded)
        self.assertEqual(m1.data.Time, m1b.data.Time)
        self.assertEqual(m1.ClientEncKey, m1b.ClientEncKey)
        self.assertEqual(m1.Ticket, m1b.Ticket)

    # case data generated by https://github.com/assaabloy-ppi/salt-channel/blob/master/src/saltchannel/dev/ExamplePacketDump.java
    # Date: 2017-07-14
    def test_M1_dumps_case4(self):
        # M1 CASE: 4 -> time:  0xdeadbeef, serverSigKey: +, ticket: 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e, ticketRequested: true
        # sizeof(M1): 202, M1: '534376320107efbeadde8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a07e28d4ee32bfdc4b07d41c92193c0c25ee6b3094c6296f373413b373d36168b7f000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e'
        m1_strdump = '534376320107efbeadde8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a07e28d4ee32bfdc4b07d41c92193c0c25ee6b3094c6296f373413b373d36168b7f000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e'
        m1_dump = bytes.fromhex(m1_strdump)
        ticket_strdump = '000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e'
        ticket_dump = bytes.fromhex(ticket_strdump)

        m1 = packets.M1Packet()
        m1.data.Header.TicketRequested = 1
        m1.data.Header.TicketIncluded = 1
        m1.data.Header.ServerSigKeyIncluded = 1
        m1.data.Time = 0xdeadbeef
        m1.ClientEncKey = CryptoTestData.aEnc.pub
        m1.create_opt_fields()  # always configure all opt-related Header fields before calling create_opt_fields()
        m1.ServerSigKey = CryptoTestData.bSig.pub
        m1.Ticket = ticket_dump

        self.assertEqual(m1.size, 202)
        self.assertEqual(bytes(m1), m1_dump)

        m1b = packets.M1Packet()
        m1b.from_bytes(m1_dump)

        self.assertEqual(m1b.size, 202)
        self.assertEqual(bytes(m1b), m1_dump)


class TestM2(BaseTest):

    def test_M2_properties(self):
        m2 = packets.M2Packet()

        m2.ServerEncKey = CryptoTestData.aEnc.pub
        self.assertEqual(m2.ServerEncKey, CryptoTestData.aEnc.pub)

    # case data generated by https://github.com/assaabloy-ppi/salt-channel/blob/master/src/saltchannel/dev/ExamplePacketDump.java
    # Date: 2017-07-16
    def test_M2_dumps_case1(self):
        # M2 CASE: 1 -> time:  0xdeadbeef, ServerEncKey: +, resumeSupported: true
        # sizeof(M2): 38, M2: '0202efbeaddede9edb7d7b7dc1b4d35b61c2ece435373f8343c85b78674dadfc7e146f882b4f'
        m2_strdump = '0202efbeaddede9edb7d7b7dc1b4d35b61c2ece435373f8343c85b78674dadfc7e146f882b4f'
        m2_dump = bytes.fromhex(m2_strdump)

        m2 = packets.M2Packet()
        m2.data.Header.ResumeSupported = 1
        m2.data.Time = 0xdeadbeef
        m2.ServerEncKey = CryptoTestData.bEnc.pub

        self.assertEqual(m2.size, 38)
        self.assertEqual(bytes(m2), m2_dump)

        # creating M2Packet from bytes
        m2b = packets.M2Packet()
        m2b.from_bytes(m2_dump)

        self.assertEqual(m2b.size, 38)
        self.assertEqual(bytes(m2b), m2_dump)

        self.assertEqual(packets.PacketType.TYPE_M2.value, m2.data.Header.PacketType, m2b.data.Header.PacketType)
        self.assertEqual(m2.data.Header.ResumeSupported, m2b.data.Header.ResumeSupported)
        self.assertEqual(m2.data.Time, m2b.data.Time)
        self.assertEqual(m2.ServerEncKey, m2b.ServerEncKey)


class TestM3(BaseTest):

    def test_M3_properties(self):
        m3 = packets.M3Packet()

        m3.ServerSigKey = CryptoTestData.bSig.pub
        self.assertEqual(m3.ServerSigKey, CryptoTestData.bSig.pub)

        m3.Signature1 = CryptoTestData.random64a
        self.assertEqual(m3.Signature1, CryptoTestData.random64a)

    def test_M3_dumps_case1(self):
        # M3 CASE: 1 -> time:  0xdeadbeef, ServerEncKey: bSig.pub
        # sizeof(M3): 102, M3: '0300efbeadde07e28d4ee32bfdc4b07d41c92193c0c25ee6b3094c6296f373413b373d36168bbe3552a308cd05afd2943030a5a582259875d00ab313a7f6d8a8fc6bf3af4732491cbc6d62351b396c8121a077e739f7764992f30be24a9b25ddedc3d68388c6'
        m3_strdump = '0300efbeadde07e28d4ee32bfdc4b07d41c92193c0c25ee6b3094c6296f373413b373d36168bbe3552a308cd05afd2943030a5a582259875d00ab313a7f6d8a8fc6bf3af4732491cbc6d62351b396c8121a077e739f7764992f30be24a9b25ddedc3d68388c6'
        m3_dump = bytes.fromhex(m3_strdump)

        m3 = packets.M3Packet()
        m3.data.Time = 0xdeadbeef
        m3.ServerSigKey = CryptoTestData.bSig.pub
        m3.Signature1 = CryptoTestData.random64a

        self.assertEqual(m3.size, 102)
        self.assertEqual(bytes(m3), m3_dump)

        # creating M3Packet from bytes
        m3b = packets.M3Packet()
        m3b.from_bytes(m3_dump)

        self.assertEqual(m3b.size, 102)
        self.assertEqual(bytes(m3b), m3_dump)

        self.assertEqual(packets.PacketType.TYPE_M3.value, m3.data.Header.PacketType, m3b.data.Header.PacketType)
        self.assertEqual(m3.data.Time, m3b.data.Time)
        self.assertEqual(m3.ServerSigKey, m3b.ServerSigKey)
        self.assertEqual(m3.Signature1, m3b.Signature1)


class TestM4(BaseTest):

    def test_M4_properties(self):
        m4 = packets.M4Packet()

        m4.ClientSigKey = CryptoTestData.aSig.pub
        self.assertEqual(m4.ClientSigKey, CryptoTestData.aSig.pub)

        m4.Signature2 = CryptoTestData.random64a
        self.assertEqual(m4.Signature2, CryptoTestData.random64a)

    def test_M4_dumps_case1(self):
        # M4 CASE: 1 -> time:  0xdeadbeef, ClientSigKey: aSig.pub
        # sizeof(M4): 102, M4: '0400efbeadde5529ce8ccf68c0b8ac19d437ab0f5b32723782608e93c6264f184ba152c2357bbe3552a308cd05afd2943030a5a582259875d00ab313a7f6d8a8fc6bf3af4732491cbc6d62351b396c8121a077e739f7764992f30be24a9b25ddedc3d68388c6'
        m4_strdump = '0400efbeadde5529ce8ccf68c0b8ac19d437ab0f5b32723782608e93c6264f184ba152c2357bbe3552a308cd05afd2943030a5a582259875d00ab313a7f6d8a8fc6bf3af4732491cbc6d62351b396c8121a077e739f7764992f30be24a9b25ddedc3d68388c6'
        m4_dump = bytes.fromhex(m4_strdump)

        m4 = packets.M4Packet()
        m4.data.Time = 0xdeadbeef
        m4.ClientSigKey = CryptoTestData.aSig.pub
        m4.Signature2 = CryptoTestData.random64a

        self.assertEqual(m4.size, 102)
        self.assertEqual(bytes(m4), m4_dump)

        # creating M4Packet from bytes
        m4b = packets.M4Packet()
        m4b.from_bytes(m4_dump)

        self.assertEqual(m4b.size, 102)
        self.assertEqual(bytes(m4b), m4_dump)

        self.assertEqual(packets.PacketType.TYPE_M4.value, m4.data.Header.PacketType, m4b.data.Header.PacketType)
        self.assertEqual(m4.data.Time, m4b.data.Time)
        self.assertEqual(m4.ClientSigKey, m4b.ClientSigKey)
        self.assertEqual(m4.Signature2, m4b.Signature2)


class TestEncryptedPacket(BaseTest):

    def test_EncryptedPacket_properties(self):
        e = packets.EncryptedPacket()

        e.Body = CryptoTestData.random64a
        self.assertEqual(e.Body, CryptoTestData.random64a)

    def test_EncryptedPacket_from_bytes(self):
        e = packets.EncryptedPacket(src_buf=bytes.fromhex('0600112233445566778899112233445566778899aabbccddeeff'))
        self.assertEqual(e.Body, bytes.fromhex('112233445566778899112233445566778899aabbccddeeff'))


class TestAppPacket(BaseTest):

    def test_AppPacket_properties(self):
        app = packets.AppPacket()

        app.Data = CryptoTestData.random64a
        self.assertEqual(app.Data, CryptoTestData.random64a)

    def test_AppPacket_from_bytes(self):
        ap = packets.AppPacket(src_buf=bytes.fromhex('050000000000112233445566778899112233445566778899aabbccddeeff'))
        self.assertEqual(ap.Data, bytes.fromhex('112233445566778899112233445566778899aabbccddeeff'))

    def test_AppPacket_invalid_input(self):
        app = packets.AppPacket()
        with self.assertRaises(BadPeer) as cm:
            app.from_bytes(bytes(1))

        with self.assertRaises(BadPeer) as cm:
            app.from_bytes(bytes(5))


if __name__ == '__main__':
    unittest.main()