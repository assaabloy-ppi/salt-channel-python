# -*- coding: utf-8 -*-

import unittest
from unittest import TestCase

import saltchannel.v2.exceptions
import saltchannel.v2.packets as packets

import saltchannel.util as util
from saltchannel.util.crypto_test_data import CryptoTestData

class BaseTest(TestCase):
    def __init__(self, *args, **kwargs):
        TestCase.__init__(self, *args, **kwargs)

    def setUp(self):
        pass

    def tearDown(self):
        pass


class TestM1(BaseTest):

    # case data generated by https://github.com/assaabloy-ppi/salt-channel/blob/master/src/saltchannel/dev/ExamplePacketDump.java
    # Date: 2017-07-14
    def test_M1_dumps_case1(self):
        # M1 CASE: 1 -> time:  0xdeadbeef, serverSigKey: null, ticket: null, ticketRequested: false
        # sizeof(M1): 42, M1: '534376320100efbeadde8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a'
        m1_strdump = '534376320100efbeadde8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a'
        m1_dump = bytes.fromhex(m1_strdump)

        m1 = packets.M1Packet()
        m1.data.Header.PacketType = packets.PacketType.TYPE_M1.value
        m1.data.Time = 0xdeadbeef
        m1.data.ClientEncKey = util.cbytes(CryptoTestData.aEnc.pub)
        self.assertEquals(m1.size, 42)
        self.assertEqual(bytes(m1), m1_dump)

        # do the same, but init via constructor

        # creating M1Packet from bytes
        m1 = packets.M1Packet()
        m1.from_bytes(m1_dump)
        self.assertEquals(m1.size, 42)
        self.assertEqual(bytes(m1), m1_dump)

    # case data generated by https://github.com/assaabloy-ppi/salt-channel/blob/master/src/saltchannel/dev/ExamplePacketDump.java
    # Date: 2017-07-14
    def test_M1_dumps_case2(self):
        # M1 CASE: 2 -> time:  0xdeadbeef, serverSigKey: +, ticket: null, ticketRequested: true
        # sizeof(M1): 74, M1: '534376320105efbeadde8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a07e28d4ee32bfdc4b07d41c92193c0c25ee6b3094c6296f373413b373d36168b'
        m1_strdump = '534376320105efbeadde8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a07e28d4ee32bfdc4b07d41c92193c0c25ee6b3094c6296f373413b373d36168b'
        m1_dump = bytes.fromhex(m1_strdump)

        m1 = packets.M1Packet(ServerSigKeyIncluded=1)
        m1.data.Header.PacketType = packets.PacketType.TYPE_M1.value
        m1.data.Header.ServerSigKeyIncluded = 1
        m1.data.Header.TicketRequested = 1
        m1.data.Time = 0xdeadbeef
        m1.data.ClientEncKey = util.cbytes(CryptoTestData.aEnc.pub)
        m1.data.ServerSigKey = util.cbytes(CryptoTestData.bSig.pub)
        self.assertEquals(m1.size, 74)
        self.assertEqual(bytes(m1), m1_dump)

        # creating M1Packet from bytes
        m1 = packets.M1Packet(ServerSigKeyIncluded=1)
        m1.from_bytes(m1_dump)
        self.assertEquals(m1.size, 74)
        self.assertEqual(bytes(m1), m1_dump)

        # case data generated by https://github.com/assaabloy-ppi/salt-channel/blob/master/src/saltchannel/dev/ExamplePacketDump.java
        # Date: 2017-07-14
        def test_M1_dumps_case3(self):
            # M1 CASE: 3 -> time:  0xdeadbeef, serverSigKey: null, ticket: 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e, ticketRequested: true
            # sizeof(M1): 170, M1: '534376320106efbeadde8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a7f000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e'
            m1_strdump = '534376320106efbeadde8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a7f000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e'
            m1_dump = bytes.fromhex(m1_strdump)

            m1 = packets.M1Packet(TicketIncluded=1)
            m1.data.Header.PacketType = packets.PacketType.TYPE_M1.value
            m1.data.Header.TicketIncluded = 1
            m1.data.Header.TicketRequested = 1
            m1.data.Time = 0xdeadbeef
            m1.data.ClientEncKey = util.cbytes(CryptoTestData.aEnc.pub)
            self.assertEquals(m1.size, 170)
            self.assertEqual(bytes(m1), m1_dump)

            m1 = packets.M1Packet(TicketIncluded=1)
            m1.from_bytes(m1_dump)
            self.assertEquals(m1.size, 170)
            self.assertEqual(bytes(m1), m1_dump)

            # case data generated by https://github.com/assaabloy-ppi/salt-channel/blob/master/src/saltchannel/dev/ExamplePacketDump.java
            # Date: 2017-07-14
            def test_M1_dumps_case4(self):
                # M1 CASE: 4 -> time:  0xdeadbeef, serverSigKey: +, ticket: 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e, ticketRequested: true
                # sizeof(M1): 202, M1: '534376320107efbeadde8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a07e28d4ee32bfdc4b07d41c92193c0c25ee6b3094c6296f373413b373d36168b7f000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e'
                m1_strdump = '534376320107efbeadde8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a07e28d4ee32bfdc4b07d41c92193c0c25ee6b3094c6296f373413b373d36168b7f000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e'
                m1_dump = bytes.fromhex(m1_strdump)

                m1 = packets.M1Packet(ServerSigKeyIncluded=1, TicketIncluded=1)
                m1.data.Header.PacketType = packets.PacketType.TYPE_M1.value
                m1.data.Header.TicketIncluded = 1
                m1.data.Header.ServerSigKeyIncluded = 1
                m1.data.Header.TicketRequested = 1
                m1.data.Time = 0xdeadbeef
                m1.data.ClientEncKey = util.cbytes(CryptoTestData.aEnc.pub)
                m1.data.ServerSigKey = util.cbytes(CryptoTestData.bSig.pub)
                self.assertEquals(m1.size, 202)
                self.assertEqual(bytes(m1), m1_dump)

                m1 = packets.M1Packet(TicketIncluded=1)
                m1.from_bytes(m1_dump)
                self.assertEquals(m1.size, 202)
                self.assertEqual(bytes(m1), m1_dump)


if __name__ == '__main__':
    unittest.main()