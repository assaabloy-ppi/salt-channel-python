# -*- coding: utf-8 -*-

import unittest
from unittest import TestCase

from saltchannel.exceptions import BadPeer
from saltchannel.a1a2.packets import *
from saltchannel.util.crypto_test_data import CryptoTestData

class BaseTest(TestCase):
    def __init__(self, *args, **kwargs):
        TestCase.__init__(self, *args, **kwargs)

    def setUp(self):
        pass

    def tearDown(self):
        pass


class TestA1(BaseTest):

    def test_A1_prop_valid(self):
        a1 = A1Packet()
        a1c = A1Packet()

        a1c.from_bytes(src=bytes(a1))
        self.assertEqual(bytes(a1), bytes(a1c))

        a1.data.AddressType = A1Packet.ADDRESS_TYPE_PUBKEY
        a1.data.AddressSize = 32
        a1.create_opt_fields()
        a1.Address = CryptoTestData.aSig.pub

        a1c.from_bytes(src=bytes(a1))
        self.assertEqual(bytes(a1), bytes(a1c))
        self.assertEqual(a1c.Address, CryptoTestData.aSig.pub)

    def test_A1_prop_invalid(self):
        a1 = A1Packet()

        a1.data.AddressType = A1Packet.ADDRESS_TYPE_ANY
        a1.data.AddressSize = 1
        with self.assertRaises(BadPeer) as cm:
            a1c = A1Packet()
            a1c.from_bytes(src=bytes(a1))

        a1.data.AddressType = A1Packet.ADDRESS_TYPE_PUBKEY
        a1.data.AddressSize = 32
        a1.Address = b'123'
        with self.assertRaises(BadPeer) as cm:
            a1c = A1Packet()
            a1c.from_bytes(src=bytes(a1))

        a1.data.AddressType = A1Packet.ADDRESS_TYPE_PUBKEY + 1
        a1.data.AddressSize = 32
        a1.Address = CryptoTestData.aSig.pub
        with self.assertRaises(BadPeer) as cm:
            a1c = A1Packet()
            a1c.from_bytes(src=bytes(a1))


    # case data generated by https://github.com/assaabloy-ppi/salt-channel/blob/master/src/saltchannel/dev/ExamplePacketDump.java
    # Date: 2017-11-01
    def test_A1_dumps_case1(self):
        # A1 CASE: 1
        # sizeof(A1): 5, A1: '0800000000'
        a1_strdump = '0800000000'
        a1_dump = bytes.fromhex(a1_strdump)

        a1 = A1Packet()
        a1.data.AddressType = A1Packet.ADDRESS_TYPE_ANY
        self.assertEqual(a1.size, 5)
        self.assertEqual(bytes(a1), a1_dump)

        # creating A1Packet from bytes
        a1b = A1Packet()
        a1b.from_bytes(a1_dump)

        self.assertEqual(a1b.size, 5)
        self.assertEqual(bytes(a1b), a1_dump)

        self.assertEqual(PacketType.TYPE_A1.value, a1.data.Header.PacketType, a1b.data.Header.PacketType)

  # case data generated by https://github.com/assaabloy-ppi/salt-channel/blob/master/src/saltchannel/dev/ExamplePacketDump.java
    # Date: 2017-11-01
    def test_A1_dumps_case2(self):
        # A1 CASE: 2
        # sizeof(A1): 37, A1: '08000120005529ce8ccf68c0b8ac19d437ab0f5b32723782608e93c6264f184ba152c2357b'
        a1_strdump = '08000120005529ce8ccf68c0b8ac19d437ab0f5b32723782608e93c6264f184ba152c2357b'
        a1_dump = bytes.fromhex(a1_strdump)

        a1 = A1Packet()
        a1.data.AddressType = A1Packet.ADDRESS_TYPE_PUBKEY
        a1.data.AddressSize = len(CryptoTestData.aSig.pub)
        a1.create_opt_fields()
        a1.Address = CryptoTestData.aSig.pub
        self.assertEqual(a1.size, 37)
        self.assertEqual(bytes(a1), a1_dump)

        # creating A1Packet from bytes
        a1b = A1Packet()
        a1b.from_bytes(a1_dump)

        self.assertEqual(a1b.size, 37)
        self.assertEqual(bytes(a1b), a1_dump)

        self.assertEqual(PacketType.TYPE_A1.value, a1.data.Header.PacketType, a1b.data.Header.PacketType)
        self.assertEqual(a1b.data.AddressType, A1Packet.ADDRESS_TYPE_PUBKEY)
        self.assertEqual(bytes(a1b.Address), CryptoTestData.aSig.pub)


class TestA2(BaseTest):

    def test_A2_prop_nosuchserver(self):
        a2 = A2Packet(case=A2Packet.Case.A2_NO_SUCH_SERVER)
        a2c = A2Packet()

        a2c.from_bytes(src=bytes(a2))
        self.assertEqual(bytes(a2), bytes(a2c))
        self.assertEqual(a2c.data.Header.NoSuchServer, 1)
        self.assertEqual(a2c.data.Header.LastFlag, 1)
        self.assertEqual(a2c.data.Count, 0)
        self.assertFalse(a2c.opt.Prot)
        self.assertFalse(a2c.Prot)    # shortcut

    def test_A2_prop_valid1(self):
        a2 = A2Packet()
        a2c = A2Packet()

        a2c.from_bytes(src=bytes(a2))
        self.assertEqual(bytes(a2), bytes(a2c))
        self.assertEqual(a2c.data.Header.NoSuchServer, 0)
        self.assertEqual(a2c.data.Header.LastFlag, 1)
        self.assertEqual(a2c.data.Count, 0)
        self.assertFalse(a2c.opt.Prot)
        self.assertFalse(a2c.Prot)    # shortcut

    def test_A2_prop_valid2(self):
        a2 = A2Packet()
        a2c = A2Packet()

        a2.data.Count = 1
        a2.create_opt_fields(prot_count=1)
        a2.Prot[0].P1 = util.cbytes(A2Packet.SC2_PROT_STRING)
        a2.Prot[0].P2 = util.cbytes(A2Packet.UNSPECIFIED_PROT_STRING)

        self.assertEqual(bytes(a2.Prot[0].P1), A2Packet.SC2_PROT_STRING)
        self.assertEqual(bytes(a2.Prot[0].P2), A2Packet.UNSPECIFIED_PROT_STRING)

        a2c.from_bytes(src=bytes(a2))
        self.assertEqual(bytes(a2), bytes(a2c))
        self.assertEqual(a2c.data.Header.NoSuchServer, 0)
        self.assertEqual(a2c.data.Header.LastFlag, 1)
        self.assertEqual(a2c.data.Count, 1)
        self.assertTrue(a2c.opt.Prot)
        self.assertEqual(bytes(a2c.Prot[0].P1), A2Packet.SC2_PROT_STRING)
        self.assertEqual(bytes(a2c.Prot[0].P2), A2Packet.UNSPECIFIED_PROT_STRING)

    def test_A2_prop_valid3(self):
        P1_TEST_VALID = b'A01b_3-de_'   # valid ranges: 'A' - 'Z', 'a' - 'z', '0' - '9', '-', '.', '/', '_'
        P2_TEST_VALID = b'..--//__0x'   # valid ranges: 'A' - 'Z', 'a' - 'z', '0' - '9', '-', '.', '/', '_'
        a2 = A2Packet()
        a2c = A2Packet()

        a2.data.Count = 2
        a2.create_opt_fields(prot_count=2)
        a2.Prot[0].P1 = util.cbytes(A2Packet.SC2_PROT_STRING)
        a2.Prot[0].P2 = util.cbytes(A2Packet.UNSPECIFIED_PROT_STRING)
        a2.Prot[1].P1 = util.cbytes(P1_TEST_VALID)
        a2.Prot[1].P2 = util.cbytes(P2_TEST_VALID)

        self.assertEqual(bytes(a2.Prot[0].P1), A2Packet.SC2_PROT_STRING)
        self.assertEqual(bytes(a2.Prot[0].P2), A2Packet.UNSPECIFIED_PROT_STRING)
        self.assertEqual(bytes(a2.Prot[1].P1), P1_TEST_VALID)
        self.assertEqual(bytes(a2.Prot[1].P2), P2_TEST_VALID)

        a2c.from_bytes(src=bytes(a2))
        self.assertEqual(bytes(a2), bytes(a2c))
        self.assertEqual(a2c.data.Header.NoSuchServer, 0)
        self.assertEqual(a2c.data.Header.LastFlag, 1)
        self.assertEqual(a2c.data.Count, 2)
        self.assertTrue(a2c.opt.Prot)
        self.assertEqual(bytes(a2c.Prot[0].P1), A2Packet.SC2_PROT_STRING)
        self.assertEqual(bytes(a2c.Prot[0].P2), A2Packet.UNSPECIFIED_PROT_STRING)
        self.assertEqual(bytes(a2c.Prot[1].P1), P1_TEST_VALID)
        self.assertEqual(bytes(a2c.Prot[1].P2), P2_TEST_VALID)

    def test_A2_prop_invalid2(self):
        a2 = A2Packet()
        a2c = A2Packet()

        a2.data.Count = 1
        a2.create_opt_fields(prot_count=1)
        a2.Prot[0].P1 = util.cbytes(b':+@)(`#^&*')
        a2.Prot[0].P2 = util.cbytes(b'_ _\t><=~12')
        with self.assertRaises(BadPeer) as cm:
            a2c.from_bytes(src=bytes(a2))

    # case data generated by https://github.com/assaabloy-ppi/salt-channel/blob/master/src/saltchannel/dev/ExamplePacketDump.java
    # Date: 2017-11-01
    def test_A2_dumps_case1(self):
        # A2 CASE: 1
        # sizeof(A2): 3, A2: '098100'
        a2_strdump = '098100'
        a2_dump = bytes.fromhex(a2_strdump)

        a2 = A2Packet(case=A2Packet.Case.A2_NO_SUCH_SERVER)
        self.assertEqual(a2.size, 3)
        self.assertEqual(bytes(a2), a2_dump)

        # creating A2Packet from bytes
        a2b = A2Packet()
        a2b.from_bytes(a2_dump)

        self.assertEqual(a2b.size, 3)
        self.assertEqual(bytes(a2b), a2_dump)

        self.assertEqual(a2b.data.Header.NoSuchServer, 1)
        self.assertEqual(a2b.data.Header.LastFlag, 1)
        self.assertEqual(a2b.data.Count, 0)
        self.assertFalse(a2b.opt.Prot)
        self.assertFalse(a2b.Prot)    # shortcut

   # case data generated by https://github.com/assaabloy-ppi/salt-channel/blob/master/src/saltchannel/dev/ExamplePacketDump.java
    # Date: 2017-11-01
    def test_A2_dumps_case2(self):
        # A2 CASE: 2
        # sizeof(A2): 23, A2: '098001534376322d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d'
        a2_strdump = '098001534376322d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d'
        a2_dump = bytes.fromhex(a2_strdump)

        a2 = A2Packet(case=A2Packet.Case.A2_DEFAUT)
        self.assertEqual(a2.size, 23)
        self.assertEqual(bytes(a2), a2_dump)

        # creating A2Packet from bytes
        a2b = A2Packet()
        a2b.from_bytes(a2_dump)

        self.assertEqual(a2b.size, 23)
        self.assertEqual(bytes(a2b), a2_dump)

        self.assertEqual(a2b.data.Header.NoSuchServer, 0)
        self.assertEqual(a2b.data.Header.LastFlag, 1)
        self.assertEqual(a2b.data.Count, 1)
        self.assertTrue(a2b.opt.Prot)
        self.assertTrue(a2b.Prot)    # shortcut
        self.assertEqual(bytes(a2b.Prot[0].P1), A2Packet.SC2_PROT_STRING)
        self.assertEqual(bytes(a2b.Prot[0].P2), A2Packet.UNSPECIFIED_PROT_STRING)

    # case data generated by https://github.com/assaabloy-ppi/salt-channel/blob/master/src/saltchannel/dev/ExamplePacketDump.java
    # Date: 2017-11-01
    def test_A2_dumps_case3(self):
        # A2 CASE: 3
        # sizeof(A2): 43, A2: '098002534376322d2d2d2d2d2d4d7950726f7456332d2d534376322d2d2d2d2d2d4e6174616c696156322d'
        a2_strdump = '098002534376322d2d2d2d2d2d4d7950726f7456332d2d534376322d2d2d2d2d2d4e6174616c696156322d'
        a2_dump = bytes.fromhex(a2_strdump)
        P_CUSTOM1 = b'MyProtV3--'
        P_CUSTOM2 = b'NataliaV2-'

        a2 = A2Packet(case=A2Packet.Case.A2_NONE)
        a2.data.Count = 2
        a2.create_opt_fields(prot_count=2)
        a2.Prot[0].P1 = util.cbytes(A2Packet.SC2_PROT_STRING)
        a2.Prot[0].P2 = util.cbytes(P_CUSTOM1)
        a2.Prot[1].P1 = util.cbytes(A2Packet.SC2_PROT_STRING)
        a2.Prot[1].P2 = util.cbytes(P_CUSTOM2)

        self.assertEqual(a2.size, 43)
        self.assertEqual(bytes(a2), a2_dump)

        # creating A2Packet from bytes
        a2b = A2Packet()
        a2b.from_bytes(a2_dump)

        self.assertEqual(a2b.size, 43)
        self.assertEqual(bytes(a2b), a2_dump)

        self.assertEqual(a2b.data.Count, 2)
        self.assertTrue(a2b.opt.Prot)
        self.assertTrue(a2b.Prot)    # shortcut
        self.assertEqual(bytes(a2b.Prot[0].P1), A2Packet.SC2_PROT_STRING)
        self.assertEqual(bytes(a2b.Prot[0].P2), P_CUSTOM1)
        self.assertEqual(bytes(a2b.Prot[1].P1), A2Packet.SC2_PROT_STRING)
        self.assertEqual(bytes(a2b.Prot[1].P2), P_CUSTOM2)


if __name__ == '__main__':
    unittest.main()